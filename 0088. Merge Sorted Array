//LeetCode 88. Merge Sorted Array

//Approach 1:
//TC: O((m+n) log(m+n))
//SC: O(log(m+n))
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = 0;
        while(m < m+n && i< n){
            nums1[m] = nums2[i];
            i++;
            m++;
        }
        Arrays.sort(nums1);
    }
}

//Approach 2:
//TC: O(m+n)
//SC: O(1)
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i= m-1;
        int j= n-1;
        int k= m+n-1;

        while(j>=0){
            if(i>=0 && nums1[i]> nums2[j])
              nums1[k--]= nums1[i--];
            else
              nums1[k--]= nums2[j--];
        }
        
    }
}

//Approach 3:
//TC: O(m+n)
//SC: O(1)
class Solution {
    
    public void merge(int[] nums1, int m, int[] nums2, int n) {
       
        int indexNums1 = m - 1; 
        int indexNums2 = n - 1; 
        int mergedIndex = m + n - 1; 

        while (indexNums2 >= 0) {
           
            if (indexNums1 < 0 || nums1[indexNums1] <= nums2[indexNums2]) {
                nums1[mergedIndex] = nums2[indexNums2]; 
                indexNums2--; 
            } else {
               
                nums1[mergedIndex] = nums1[indexNums1];
                indexNums1--; 
            }
            mergedIndex--; 
        }
    }
}
