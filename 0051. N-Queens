//LeetCode 51. N-Queens

//Appraoch 1 : 
//TC : O(N!)
//SC : O(N^2)
public class Solution {
    
    private List<List<String>> solutions = new ArrayList<>();
  
    private int[] columns;
    private int[] diagonals;
    private int[] antiDiagonals;
  
    // Chessboard representation
    private String[][] board;
  
    private int size;

    public List<List<String>> solveNQueens(int n) {
        this.size = n;
        columns = new int[n];
        diagonals = new int[2 * n];
        antiDiagonals = new int[2 * n];
        board = new String[n][n];
      
        for (int i = 0; i < n; ++i) {
            Arrays.fill(board[i], ".");
        }
      
        depthFirstSearch(0);
        return solutions;
    }

    private void depthFirstSearch(int row) {
        if (row == size) {
            List<String> oneSolution = new ArrayList<>();
            for (int i = 0; i < size; ++i) {
                oneSolution.add(String.join("", board[i]));
            }
           
            solutions.add(oneSolution);
            return;
        }
       
        for (int col = 0; col < size; ++col) {
        
            if (columns[col] + diagonals[row + col] + antiDiagonals[size - row + col] == 0) {
                
                board[row][col] = "Q";
                
                columns[col] = diagonals[row + col] = antiDiagonals[size - row + col] = 1;
                
                depthFirstSearch(row + 1);
                
                columns[col] = diagonals[row + col] = antiDiagonals[size - row + col] = 0;
                board[row][col] = ".";
            }
        }
    }
}


//Approach 2 :
//TC : O(N!⋅N) or O(N!⋅N^2)
//SC : O(N^2)
class Solution {
    public List<List<String>> solveNQueens(int n) {

        char[][] board = new char[n][n];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                board[i][j] = '.';
            }
        }

        List<List<String>> result = new ArrayList<>();
        queens(board, 0, result);
        return result;
    }

    private void queens(char[][] board, int row, List<List<String>> list){
        if(row == board.length){
            list.add(construct(board));
            return;
        }

        for(int col = 0; col < board.length; col++){
            if(isSafe(board, row, col)){
                board[row][col] ='Q';
                queens(board, row + 1, list);
                board[row][col] = '.';
            }
        }
    }

    private List<String> construct(char[][] board){
        List<String> internalList = new ArrayList<>();
        for(int i = 0; i < board.length; i++){
            String row = new String(board[i]);
            internalList.add(row);
        }
        return internalList;
    }

    private boolean isSafe(char[][] board, int row, int col){
        //vertical row
        for(int i = 0; i < row; i++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }

        //diagonal left
        int maxLeft = Math.min(row, col);
        for(int i = 1; i <= maxLeft; i++){
            if(board[row - i][col - i] == 'Q'){
                return false;
            } 
        }

        //diagonal right
        int maxRight = Math.min(row, board.length - col - 1);
        for(int i = 1; i<= maxRight; i++){
            if(board[row - i][col + i] == 'Q'){
                return false;
            }
        }
        return true;
    }
}
