//LeetCode 86. Partition List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {

        ListNode lesserHead= new ListNode (0);
        ListNode greaterHead= new ListNode (0);
        ListNode lesserTail= lesserHead;
        ListNode greaterTail= greaterHead;

        while(head != null){
            if(head.val < x){
                lesserTail.next = head;
                lesserTail = head;
             } else{
                greaterTail.next = head;
                greaterTail = head;
             }

             head= head.next;
        }

        //join lesser and greater part
        lesserTail.next = greaterHead.next;
        greaterTail.next = null;

        return lesserHead.next;
        
    }
}
