//LeetCode 5. Longest Palindromic Substring

//Method 1: DP
class Solution {
  public String longestPalindrome(String s) {
    int n= s.length();
    boolean dp[][] = new boolean [n][n];

    for(boolean d[] : dp){
        Arrays.fill(d, true);
    }

    int start=0;
    int maxLength=1;

    for(int i=n-2; i>=0 ; i--){
        for(int j=i+1 ; j<n ; j++){
            dp[i][j]= false;
            if(s.charAt(i) == s.charAt(j)){
                dp[i][j] = dp[i+1][j-1];
                if(dp[i][j] && maxLength < j-i+1){
                    maxLength = j-i+1;
                    start=i;
                }
            }
        }
    }
    return s.substring(start, start+maxLength);
  }
}



//Method 2: 
class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s.length() < 1) return "";

        int start=0;
        int end=0;

        for(int i=0; i< s.length() ; i++){
            //odd
            int len1= expandAroundCenter(s , i, i);
            //even
            int len2= expandAroundCenter(s , i, i+1);

            int len= Math.max(len1 , len2);

            if(len > end- start){
                start = i - (len-1)/2;
                end = i + (len/2);
            }
        }
        return s.substring(start , end +1);
    }

    private int expandAroundCenter(String s, int left , int right){
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        return right - left -1;
    }
}

