//LeetCode 289. Game of Life

//Approach 1: 
//TC:O(n)  SC: O(n)         
class Solution {

    int [][] dir= {{-1,-1} , {-1,0}, {-1,1} , {0,-1}, {0,1}, {1,-1}, {1,0}, {1,1}};

    public void gameOfLife(int[][] board) {
        int m= board.length;
        int n= board[0].length;
        int res[][] = new int[m][n];

        for(int i=0 ; i<m ; i++){
            for(int j=0; j<n; j++){
                int count=0;

                for(int[] d: dir){
                    int p= d[0]+i;
                    int q= d[1]+j;

                    if(p>=0 && p<m && q>=0 && q<n && board[p][q]==1){
                        count++;
                    }
                }
                if(board[i][j] == 1){
                    if(count==2 || count==3){
                        res[i][j]=1;
                    }

                } else{
                    if(count == 3){
                        res[i][j]=1;
                    }
                }
            }
        }
         for(int i=0; i<m ; i++){
            for(int j=0; j<n; j++){
                board[i][j]= res[i][j];
            }
         }
    }
}



//Approach 2:
//TC:O(m*n)
//SC:O(1)
class Solution {
    public void gameOfLife(int[][] board) {
        int numRows = board.length;
        int numCols = board[0].length;
      
        for (int row = 0; row < numRows; ++row) {
            for (int col = 0; col < numCols; ++col) {
                int liveNeighbors = -board[row][col];
                for (int i = row - 1; i <= row + 1; ++i) {
                    for (int j = col - 1; j <= col + 1; ++j) {
                        if (i >= 0 && i < numRows && j >= 0 && j < numCols && board[i][j] > 0) {
                            liveNeighbors++;
                        }
                    }
                }
              
                if (board[row][col] == 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {
                    board[row][col] = 2;
                }
              
                if (board[row][col] == 0 && liveNeighbors == 3) {
                    board[row][col] = -1;
                }
            }
        }
      
        for (int row = 0; row < numRows; ++row) {
            for (int col = 0; col < numCols; ++col) {
                // A value of 2 means the cell was previously alive and now is dead
                if (board[row][col] == 2) {
                    board[row][col] = 0;
                }
                // A value of -1 means the cell was previously dead and now is alive
                else if (board[row][col] == -1) {
                    board[row][col] = 1;
                }
            }
        }
    }
}

