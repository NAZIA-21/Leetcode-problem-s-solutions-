// LeetCode 42. Trapping Rain Water

//Approach 1:
//TC : O(n)
//SC : O(n)
class Solution {
    public int trap(int[] height) {
       int length= height.length;

       int [] maxL= new int[length];
       int [] maxR= new int[length];

       maxL[0] = height[0];
       maxR[length -1] = height[length -1];

       //populating maxL
       for(int i=1; i< length ;i++){
        maxL[i] = Math.max(maxL[i-1] , height[i]);
       }

       //populating maxR
       for(int i= length -2 ; i>=0 ; i--){
        maxR[i]= Math.max(maxR[i+1] , height[i]);
       }

       int totWater= 0;

       for(int i=0; i<length ; i++){
        totWater += Math.min(maxL[i] , maxR[i]) - height[i];
       }

        return totWater;
    }
}



//Approach 2:
//TC : O(n)
//SC : O(1)
class Solution {
    public int trap(int[] height) {
      if(height.length == 0){
        return 0;
      } 

      int l=0;
      int r= height.length -1;
      int maxL = height[l];
      int maxR= height[r];
      int totWater =0;

      while(l < r){
        if(maxL < maxR){
            totWater += maxL - height[l];
            maxL = Math.max(maxL , height[++l]);
        } else {
            totWater += maxR - height[r];
            maxR = Math.max(maxR , height[--r]);
        }
      }

      return totWater;
    
    }
}












