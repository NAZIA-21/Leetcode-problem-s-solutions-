//LeetCode 144:  Binary tree preOrder traversal

//Approach 1: recursive 
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res= new ArrayList<>();
        preOrder(root, res);
        return res;
    }
    private void preOrder(TreeNode root, List<Integer> res){
        //preOrder:- root-> left-> right;
        if(root== null) return;

        res.add(root.val);
        preOrder(root.left, res);
        preOrder(root.right, res);

      }
}

//Approach 2: Iterative 
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res= new ArrayList<>();

        if(root==  null) return res;

        Stack <TreeNode> st= new Stack<>();
        st.push(root);

        while(!st.empty()){
            root= st.pop();
            res.add(root.val);

            if(root.right != null){
                st.push(root.right);
            }
            if(root.left != null){
                st.push(root.left);
            }
        }

        return res;
    }
}
