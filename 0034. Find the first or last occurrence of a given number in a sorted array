//LeetCode 34. Find the first or last occurrence of a given number in a sorted array

//Method 1: TC-O(N)
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[] {-1, -1};
        }

        int start = -1;
        int end = -1;

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                if (start == -1) { 
                    start = i;
                }
                end = i; 
            }
        }

        return new int[] {start, end};
    }
}


//Method 2: TC-O(logN)
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0) return new int[] {-1, -1};

        int left= findFirstOccurence(nums, target);
        if(left == nums.length || nums[left] != target) return new int[] {-1, -1};

        int right = findFirstOccurence(nums , target +1) -1;
        
        return new int[] {left , right};
    }

    private int findFirstOccurence(int[] nums , int target){
        int n= nums.length;

        int left= 0;
        int right= n;
        
        while(left < right){
            int mid= (left + right)/2;

            if(nums[mid] >= target){
                right = mid;
            }else{
                left = mid+1;
            }
        }
        return left;
    }
}
