//LeetCode 49. Group Anagrams

//Approach 1:
class Solution {

    private String getFrequencyString(String str){
        int freq[] = new int[26];

        for(char ch : str.toCharArray())
            freq[ch - 'a']++;

        StringBuilder sb= new StringBuilder();
        char ch= 'a';

        for(int i : freq){
            sb.append(ch);
            sb.append(i);
            ch++;
        }

        return sb.toString();
    }


    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs== null || strs.length == 0) 
        return new ArrayList<>();

        Map<String , List<String>> freqMap= new HashMap<>();

        for(String str : strs){
            String freqString = getFrequencyString(str);

            if(freqMap.containsKey(freqString)){
                freqMap.get(freqString).add(str);
            } else{
                List<String> strList= new ArrayList<>();
                strList.add(str);
                freqMap.put(freqString , strList);
            }
        }

        return new ArrayList<>(freqMap.values());
    }
}




//Approach 2:
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs == null || strs.length ==0) 
            return new ArrayList<>();

        Map<String , List<String>> map= new HashMap<>();

        for(String s: strs){
            char [] charArray= s.toCharArray();
            Arrays.sort(charArray);
            String sorted = new String(charArray);

            if(!map.containsKey(sorted)){
                map.put(sorted , new ArrayList<>());
            }

            map.get(sorted).add(s);
        }


        return new ArrayList<>(map.values());
    }
}
