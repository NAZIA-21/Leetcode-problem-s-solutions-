//LeetCode 123. Best time to buy and sell stock III
//Approach 1:
class Solution {
    public int maxProfit(int[] prices) {
      int n= prices.length;
      if(n==0) return 0;

      int[] left= new int[n];//buy
      int[] right= new int[n];//sell

      //bidirectional dp logic
      //left to right
      int min= prices[0];
      for(int i=1 ; i<n; i++){
        //1.update buy prices
        if(prices[i] < min) min= prices[i];
        //2.calc curr profit
        int profit= prices[i] - min; //selling price - buying price
        //3.fill the left array 
        left[i]= Math.max(left[i-1] , profit);
      }

      //right to left
      int max=prices[n-1];
      for(int i= n-2; i>=0 ; i--){
        //1.update the max
        if(prices[i] > max) max= prices[i];
        //2.calc the current profit
        int profit= max - prices[i];
        //3.fill the right array
        right[i]= Math.max(right[i+1] , profit);
      }

      int maxProfit=0;
      for(int i=0; i< n ; i++){
        maxProfit= Math.max(maxProfit , left[i] + right[i]);
      }
        return maxProfit;
    }
}


//Approach 2:
class Solution {
    public int maxProfit(int[] prices) {
       int c1= Integer.MAX_VALUE;
       int c2= Integer.MAX_VALUE;
       int p1=0; 
       int p2=0;

       for(int price: prices){
        c1= Math.min(c1, price);
        p1=Math.max(p1, price-c1);
        c2= Math.min(c2, price-p1);
        p2=Math.max(p2, price-c2);
       }
    return p2;
    }
}
