//LeetCode 238. Product of Array Except Self

//Approach 1:
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n= nums.length;
        int leftNum[]= new int[n];
        int rightNum[]= new int [n];

        leftNum[0] = nums[0];
        for(int i=1; i<n ; i++){
            leftNum[i] = leftNum[i-1] * nums[i];
        }

        rightNum[n-1] = nums[n-1];
        for(int i= n-2; i>=0 ; i--){
            rightNum[i]= rightNum[i+1] * nums[i];
        }

        int output[] = new int [n];
        for(int i=0; i<n ;i++){
            if(i==0){
                output[i] = rightNum[i+1];
            }
            else if(i== n-1){
                output[i] = leftNum[i-1];
            }
            else{
                output[i] = leftNum[i-1] * rightNum[i+1];
            }
        }
        return output;
    }
}


//Approach 2:
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int []result = new int[nums.length];
        int product = 1;
        int zeros =0;

        for(int i=0; i< nums.length; i++){
            if(nums[i] == 0){
                zeros++;
            }else{
                product *= nums[i];
            }
        }

        for(int i=0; i< nums.length; i++){
            if(zeros > 1){
                result[i] = 0;
            }else if(zeros == 1){
                result[i] = nums[i] == 0 ? product : 0;
            }else{
                result[i] = product / nums[i];
            }
        }
        return result;
        
    }
}
