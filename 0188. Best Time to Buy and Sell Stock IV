//LeetCode 188. Best Time to Buy and Sell Stock IV

//Method 1:
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k >= (prices.length)/2){
            int sell= 0;
            int hold= Integer.MIN_VALUE;

            for(final int price : prices){
                sell= Math.max(sell , hold + price);
                hold= Math.max(hold , sell - price);
            }
            return sell;
        }

        int [] sell= new int [k+1];
        int [] hold= new int [k+1];
        Arrays.fill(hold , Integer.MIN_VALUE);

        for(final int price : prices){
            for(int i=k ; i>0 ; i--){
                sell[i] = Math.max(sell[i] , hold[i] + price);
                hold[i] = Math.max(hold[i] , sell[i - 1] - price);
            }
        }
        return sell[k];
    }
}

//Method 2:
class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;

        int[][] profits = new int[k + 1][2];

        // the initial profit should be negative, which is the cost of the stock on the first day
        for (int transac = 1; transac <= k; transac++) {
            profits[transac][1] = -prices[0];
        }

        for (int day = 1; day < n; day++) {

            for (int transac = k; transac > 0; --transac) {
                // Update profit for the case we sell the stock today:
                // Max of (previous profit for holding a stock and selling it today, previous profit without holding any stock)
                profits[transac][0] = Math.max(profits[transac][1] + prices[day], profits[transac][0]);

                // Update profit for the case we buy the stock today:
                // Max of (profit from the last transaction minus the price of today's stock, previous profit with holding a stock)
                profits[transac][1] = Math.max(profits[transac - 1][0] - prices[day], profits[transac][1]);
            }
        }

        return profits[k][0];
    }
}
