//LeetCode 114. Flatten Binary Tree to Linked List

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Approach 1: Recursive
class Solution {
    TreeNode prev = null;
    public void flatten(TreeNode root) {
        if(root == null)
            return;
        
        flatten(root.right);
        flatten(root.left);

        root.right= prev;
        root.left= null;
        prev= root;   
    }
}


//Approach 2: Stack
class Solution {
    public void flatten(TreeNode root) {
        if(root == null) return;

        Deque<TreeNode> stack = new ArrayDeque<>();
        stack.push(root);

        while(!stack.isEmpty()){
            root = stack.pop();

            if(root.right != null)
                stack.push(root.right);
            
            if(root.left != null)
                stack.push(root.left);
            
            if(!stack.isEmpty())
                root.right = stack.peek();
            root.left = null;    
        }
    
    }
}


//Approach 3:
class Solution {
    public void flatten(TreeNode root) {
       while(root != null){
        if(root.left != null){
            TreeNode rightmost = root.left;
            while(rightmost.right != null){
                rightmost = rightmost.right;
            }
            rightmost.right= root.right;
            root.right= root.left;
            root.left = null;
        }
         root= root.right;
       }
    }
}
