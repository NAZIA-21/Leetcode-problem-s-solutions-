//LeetCode 98. Validate Binary Search Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Approach 1: DFS
//TC: O(n)
//SC: O(h)
class Solution {
    private Integer prev;

    public boolean isValidBST(TreeNode root) {
        prev = null;
        return isValid(root);
    }

    private boolean isValid(TreeNode root){
        if(root== null) return true;

        if(!isValid(root.left)) return false;

        //since its an inorder traversal prev cannot be greater than current node's value
        if(prev != null && prev >= root.val) return false;
        prev= root.val;

        if(!isValid(root.right)) return false;

        return true;
    }
}


//Approach 2: Resursive
//TC: O(n)
//SC: O(n)
class Solution {
   
    public boolean isValidBST(TreeNode root) {
        return isValid(root, null, null);
    }

    private boolean isValid(TreeNode root, TreeNode minNode, TreeNode maxNode){
        if(root== null) return true;

        if(minNode != null &&  root.val <= minNode.val) return false;

        if(maxNode != null && root.val  >= maxNode.val) return false;

        return isValid(root.left, minNode , root) && isValid(root.right, root, maxNode);
    }
}


//Approach 3: Iterative (Stack)
//TC: O(n)
//SC: O(n)
class Solution {
   
    public boolean isValidBST(TreeNode root) {
        Deque<TreeNode> stack= new ArrayDeque<>();
        TreeNode prev = null;

        while(root != null || !stack.isEmpty()){
            while(root!= null){
                stack.push(root);
                root= root.left;
            }
            root= stack.pop();

            if(prev != null && prev.val >= root.val) return false;
            prev = root;
            root= root.right;
        }
        return true;
    }
}
