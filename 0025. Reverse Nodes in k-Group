//LeetCode 25. Reverse Nodes in k-Group

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
       if(head == null || k==1) return head;

       int length= getlength(head);

       ListNode dummy= new ListNode(0, head);
       ListNode prev= dummy;
       ListNode curr= head;

       for(int i=0; i< length/k ; i++){
        for(int j=0; j< k-1 ; j++){
            ListNode next= curr.next;
            curr.next= next.next;
            next.next= prev.next;
            prev.next= next;
        }
       prev= curr;
       curr= curr.next;
       }
       return dummy.next;

    }

    private int getlength(ListNode head){
        int length =0;
        for(ListNode curr= head; curr != null; curr= curr.next){
            length++;
        }
        return length;
    }
}
