//LeetCode 13. Roman to Integer

//Approach 1:
class Solution {
  public int romanToInt(String s) {
    int ans = 0;
    int[] roman = new int[100];

    roman['I'] = 1;
    roman['V'] = 5;
    roman['X'] = 10;
    roman['L'] = 50;
    roman['C'] = 100;
    roman['D'] = 500;
    roman['M'] = 1000;

    for (int i = 0; i  < s.length() -1; i++)
      if (roman[s.charAt(i)] < roman[s.charAt(i + 1)])
        ans -= roman[s.charAt(i)];
      else
        ans += roman[s.charAt(i)];

    return ans + roman[s.charAt(s.length() - 1)];
  }
}


//Approach 2:
class Solution {
  public int romanToInt(String s) {

    String romanSymbols = "IVXLCDM";

    int[] values= {1, 5, 10, 50, 100, 500, 1000};

    Map<Character , Integer> map= new HashMap<>();

    for(int i=0; i < values.length ; i++){
        map.put(romanSymbols.charAt(i) , values[i]);
    }

    int length= s.length();

    int ans= map.get(s.charAt(length -1));

    for(int i=0; i< length -1 ; i++){
        int sign= map.get(s.charAt(i)) < map.get(s.charAt(i + 1)) ? -1 : 1;
        ans += sign * map.get(s.charAt(i));
    }
    return ans;
  }
}





























