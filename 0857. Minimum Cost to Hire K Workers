//LeetCode 857. Minimum Cost to Hire K Workers
class Solution {

    class Worker{
        double ratio;
        int quality;

        Worker(int quality, int wage){
            this.quality= quality;
            this.ratio= (double) wage/quality;
        }
    }
    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {
        int n= quality.length;
        Worker [] workers= new Worker[n];

        for(int i=0; i< n; i++){
            workers[i]= new Worker(quality[i] , wage[i]);
        }

        Arrays.sort(workers , (a,b)-> Double.compare(a.ratio , b.ratio));

        PriorityQueue<Integer> maxHeap= new  PriorityQueue<>((a, b)-> b-a);
        double minCost= Integer.MAX_VALUE;
        int totQuality=0;

        for(Worker worker: workers){
              totQuality+= worker.quality;
              maxHeap.offer(worker.quality);

              if(maxHeap.size()== k){
                minCost= Math.min(minCost , totQuality * worker.ratio);
                totQuality-= maxHeap.poll();
              }
        }
        return minCost;
    }
}
