//LeetCode 199. Binary Tree RightSide View

//Approach 1: Iterative
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if(root== null){
            return new ArrayList<>();
        }
        List<Integer> ans= new ArrayList<>();
        Queue<TreeNode> q= new ArrayDeque<>(Arrays.asList(root));

        while(!q.isEmpty()){
            int size= q.size();
            for(int i=0; i<size; i++){
                TreeNode node= q.poll();
                if(i== size-1){
                    ans.add(node.val);
                }
                if(node.left!= null){
                    q.offer(node.left);
                }
                if(node.right!= null){
                    q.offer(node.right);
                }
            }
        }
        return ans;    
    }
}



//Approach 2: Recursive
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res= new ArrayList<>();
        rightView(root, 0, res);
        return res;
    }

    public void rightView(TreeNode curr, int level, List<Integer> res){
        if(curr == null) return;
        if(level == res.size()){
            res.add(curr.val);
        }
        //root->right->left
        rightView(curr.right, level + 1, res);
        rightView(curr.left, level + 1, res);
    }
}
