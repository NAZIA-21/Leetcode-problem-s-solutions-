//LeetCode 2542. Maximum Subsequence Score
class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n= nums1.length;
        int[][] numsPair= new int[n][2];

        for(int i=0; i< n; i++){
            numsPair[i]= new int[]{nums1[i] , nums2[i]};
        }

        Arrays.sort(numsPair, (a,b) -> b[1]-a[1]); //sorting based on nums2 in dec order

        long maxScore=0;
        long sum=0;
        PriorityQueue<Integer> minHeap= new PriorityQueue<>();

        for(int i=0; i< n; i++){
            sum+= numsPair[i][0];
            minHeap.offer(numsPair[i][0]);

            if(minHeap.size()== k){
                maxScore= Math.max(maxScore , sum* numsPair[i][1]);
                sum-= minHeap.poll();
            }
        }
      return maxScore;  
    }
}
